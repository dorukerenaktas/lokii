from __future__ import annotations

from typing import TypedDict, List, Literal, Optional, Any


class SimpleGenConfig(TypedDict):
    """
    Generation configuration that refers to a specific set of rules or parameters that determine
    how the simple table is generated. It could involve various factors such as relation tables,
    or row count.

    :var type: provided as literal string "simple"
    :var count: target row count of the generated table
    :var rels: list of relation tables
    """
    type: Literal["simple"]
    count: int
    rels: Optional[List[str]]


class ProductGenConfig(TypedDict):
    """
    Generation configuration that refers to a specific set of rules or parameters that determine
    how the product table is generated. It could involve various factors such as multiplier tables,
    literals, or relations.

    A product table is a structured arrangement of data that represents the generated results of
    multiplying one or more tables. Each row in the table generated by the gen function which fed
    the corresponding values from the tables being multiplied.

    If only one table provided as `mul` variable, for each row in `mul` table gen function will be
    called once.

    A product table consists of at least one table multiplier. If only one `mul` table provided
    product table will be one--to-one map of that table.
    :var type: provided as literal string "product"
    :var mul: list of multiplier tables or literal lists
    :var rels: list of relation tables
    """
    type: Literal["product"]
    mul: List[str | int | List[str | int]]
    rels: Optional[List[str]]


class TableDefinition(TypedDict):
    cols: List[str]
    gen: SimpleGenConfig | ProductGenConfig


class DatasetTableDefinition(TypedDict):
    table_schema: str
    table_name: str
    table_def: TableDefinition
    table_gen: Any
